kind: pipeline
type: docker
name: build

volumes: # 声明数据卷
- name: site-packages #后端依赖包
  host:  # Host Volume
    path: /volumes/drone/site-packages/ # 宿主机目录
- name: node_modules # 前端依赖包
  host: 
    path: /volumes/drone/node_modules  # 宿主机目录
# - name: source-code
#   host:
#     path: /volumes/drone/source-code/
clone:
  disable: false # 启用拉取

steps:
  - name: build-fronted-dep # 构建前端
    image: node:latest # 使用镜像
    depends_on: [clone] # 依赖的步骤
    volumes: # 挂载数据卷
    - name: node_modules # 数据卷名称
      path: /drone/src/vue-element-admin-new/node_modules # 容器内目录 绝对路径
    commands: # 执行命令
      - cd /drone/src/vue-element-admin-new/ #
      - npm config set registry https://registry.npm.taobao.org # 切换淘宝镜像
      - git config --global http.sslverify "false"
      - git config --global url."https://github.com/".insteadOf "ssh://git@github.com/"
      - npm install # 安装node_modules包
      - export NODE_OPTIONS=--openssl-legacy-provider
      - npm run build:stage # 执行编译   
      
  - name: code-scp
    image: appleboy/drone-scp
    settings:
      host: 
        from_secret: ssh_host
      username: 
        from_secret: ssh_user
      port: 22
      password: 
        from_secret: ssh_password
      target: /volumes/drone/source-code/
      source: docker-compose.yml

  # - name: build-backend-dep
  #   image: python:3.9
  #   depends_on: [build-fronted-dep]
  #   volumes: # 挂载数据卷
  #   - name: site-packages # 数据卷名称
  #     path: /site-packages/ # 容器内目录 绝对路径
  #   # - name: source-code
  #   #   paht: /source-code/
  #   commands: # 执行命令
  #     - ln -s /usr/local/lib/python3.9/site-packages/ / -r
  #     - cd /drone/src/myproject/ 
  #     - python3 -m pip install -r requirements.txt
  #     # - cp /drone/src/ / -r


      
      
      # 编写脚本，可根据具体情况编写
  #     script:
  #       - echo ====开始部署=======
  #       - echo ====拉取代码=======
  #       - cd /TestProject
  #       - echo ====重新构建镜像=======
  #       - cd /TestProject
  #       - docker-compose stop
  #       - docker-compose build
  #       - echo ====重新启动容器=======
  #       - docker-compose up -d
  #       - echo ====删除所有为None的镜像=======
  #       - docker rmi $(docker images -f "dangling=true" -q)
  #       - echo ====清除日志/无用镜像、容器、卷======
  #       - cat /dev/null > *-json.log
  #       - docker system prune -f
  #       - echo =======部署结束=======
